#!/bin/bash

# ==================================================================================
# SCRIPT DE TEST POUR L'INSTALLATION MANUELLE UBUNTU 24.04
# Test des √©tapes d'installation du portfolio Hocine IRATNI
# ==================================================================================

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction de logging
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Fonction pour v√©rifier si une commande s'est bien d√©roul√©e
check_command() {
    if [ $? -eq 0 ]; then
        log_success "$1"
        return 0
    else
        log_error "$1"
        return 1
    fi
}

# Variables de test
TEST_COUNT=0
PASS_COUNT=0
FAIL_COUNT=0

# Fonction pour ex√©cuter un test
run_test() {
    TEST_COUNT=$((TEST_COUNT + 1))
    log_info "Test $TEST_COUNT: $1"
    
    if eval "$2"; then
        PASS_COUNT=$((PASS_COUNT + 1))
        log_success "‚úÖ $1"
        return 0
    else
        FAIL_COUNT=$((FAIL_COUNT + 1))
        log_error "‚ùå $1"
        return 1
    fi
}

log_info "üß™ D√âBUT DES TESTS DE VALIDATION - INSTALLATION MANUELLE UBUNTU 24.04"
log_info "Test de la proc√©dure d'installation du portfolio Hocine IRATNI"

# ==================================================================================
# TESTS DES PR√âREQUIS SYST√àME
# ==================================================================================

log_info "üìã Tests des pr√©requis syst√®me..."

run_test "V√©rification Ubuntu/Debian" "grep -E 'Ubuntu|Debian' /etc/os-release > /dev/null 2>&1"
run_test "V√©rification pr√©sence curl" "command -v curl > /dev/null 2>&1"
run_test "V√©rification pr√©sence wget" "command -v wget > /dev/null 2>&1"
run_test "V√©rification pr√©sence git" "command -v git > /dev/null 2>&1"
run_test "V√©rification pr√©sence supervisorctl" "command -v supervisorctl > /dev/null 2>&1"

# ==================================================================================
# TESTS DE MARIADB
# ==================================================================================

log_info "üóÑÔ∏è Tests de MariaDB..."

run_test "V√©rification installation MariaDB" "command -v mysql > /dev/null 2>&1"
run_test "V√©rification service MariaDB" "systemctl is-active mariadb > /dev/null 2>&1 || pgrep mysqld > /dev/null 2>&1"
run_test "Test connexion base portfolio_db" "mysql -u portfolio_user -pportfolio_password -e 'SELECT 1;' portfolio_db > /dev/null 2>&1"
run_test "V√©rification tables portfolio" "mysql -u portfolio_user -pportfolio_password -e 'SHOW TABLES;' portfolio_db | grep -E 'personal_info|education|skills' > /dev/null 2>&1"

# ==================================================================================
# TESTS DE NODE.JS ET YARN
# ==================================================================================

log_info "üì¶ Tests de Node.js et Yarn..."

run_test "V√©rification installation Node.js" "command -v node > /dev/null 2>&1"
run_test "V√©rification version Node.js (>= 18)" "node --version | grep -E 'v(18|19|20|21|22)' > /dev/null 2>&1"
run_test "V√©rification installation Yarn" "command -v yarn > /dev/null 2>&1"

# ==================================================================================
# TESTS DE PYTHON
# ==================================================================================

log_info "üêç Tests de Python..."

run_test "V√©rification installation Python 3" "command -v python3 > /dev/null 2>&1"
run_test "V√©rification version Python (>= 3.8)" "python3 --version | grep -E 'Python 3\.(8|9|10|11|12)' > /dev/null 2>&1"
run_test "V√©rification installation pip" "command -v pip3 > /dev/null 2>&1"

# ==================================================================================
# TESTS DU PORTFOLIO
# ==================================================================================

log_info "üìÅ Tests du portfolio..."

run_test "V√©rification r√©pertoire backend" "[ -d '/app/backend' ]"
run_test "V√©rification r√©pertoire frontend" "[ -d '/app/frontend' ]"
run_test "V√©rification fichier requirements.txt" "[ -f '/app/backend/requirements.txt' ]"
run_test "V√©rification fichier package.json" "[ -f '/app/frontend/package.json' ]"

# ==================================================================================
# TESTS DU BACKEND
# ==================================================================================

log_info "üîß Tests du backend..."

run_test "V√©rification environnement virtuel backend" "[ -d '/app/backend/venv' ] || [ -f '/app/backend/venv/bin/activate' ]"
run_test "V√©rification configuration backend (.env)" "[ -f '/app/backend/.env' ]"
run_test "V√©rification service backend" "supervisorctl status backend | grep RUNNING > /dev/null 2>&1"
run_test "Test API health check" "curl -s http://localhost:8001/api/health > /dev/null 2>&1"
run_test "Test API personal info" "curl -s http://localhost:8001/api/portfolio/personal-info > /dev/null 2>&1"

# ==================================================================================
# TESTS DU FRONTEND
# ==================================================================================

log_info "‚öõÔ∏è Tests du frontend..."

run_test "V√©rification d√©pendances frontend" "[ -d '/app/frontend/node_modules' ]"
run_test "V√©rification build frontend" "[ -d '/app/frontend/build' ] || [ -f '/app/frontend/build/index.html' ]"
run_test "V√©rification service frontend" "supervisorctl status frontend | grep RUNNING > /dev/null 2>&1"
run_test "Test accessibilit√© frontend" "curl -s http://localhost:3000 > /dev/null 2>&1"

# ==================================================================================
# TESTS DE NGINX
# ==================================================================================

log_info "üåê Tests de Nginx..."

run_test "V√©rification installation Nginx" "command -v nginx > /dev/null 2>&1"
run_test "V√©rification service Nginx" "systemctl is-active nginx > /dev/null 2>&1 || pgrep nginx > /dev/null 2>&1"
run_test "Test configuration Nginx" "nginx -t > /dev/null 2>&1"

# ==================================================================================
# TESTS DE S√âCURIT√â
# ==================================================================================

log_info "üîí Tests de s√©curit√©..."

run_test "V√©rification firewall UFW" "command -v ufw > /dev/null 2>&1"
run_test "V√©rification statut firewall" "ufw status | grep -E 'Status: active|inactive' > /dev/null 2>&1"

# ==================================================================================
# TESTS DE PERFORMANCE
# ==================================================================================

log_info "‚ö° Tests de performance..."

run_test "Test temps de r√©ponse backend" "timeout 5 curl -s http://localhost:8001/api/health > /dev/null 2>&1"
run_test "Test temps de r√©ponse frontend" "timeout 5 curl -s http://localhost:3000 > /dev/null 2>&1"

# ==================================================================================
# TESTS DE DONN√âES
# ==================================================================================

log_info "üìä Tests de donn√©es..."

run_test "Test donn√©es Hocine IRATNI" "curl -s http://localhost:8001/api/portfolio/personal-info | grep -i 'hocine' > /dev/null 2>&1"
run_test "Test donn√©es comp√©tences" "curl -s http://localhost:8001/api/portfolio/skills | grep -E 'R√©seaux|Syst√®mes' > /dev/null 2>&1"
run_test "Test donn√©es projets" "curl -s http://localhost:8001/api/portfolio/projects | grep -E 'BTS|SIO' > /dev/null 2>&1"

# ==================================================================================
# R√âSUM√â DES TESTS
# ==================================================================================

log_info "üìä R√âSUM√â DES TESTS"
echo ""
echo "=================================================="
echo "üéØ R√âSULTATS DES TESTS D'INSTALLATION"
echo "=================================================="
echo ""
echo "üìä Statistiques :"
echo "  ‚Ä¢ Tests ex√©cut√©s : $TEST_COUNT"
echo "  ‚Ä¢ Tests r√©ussis  : $PASS_COUNT"
echo "  ‚Ä¢ Tests √©chou√©s  : $FAIL_COUNT"
echo ""

if [ $FAIL_COUNT -eq 0 ]; then
    log_success "üéâ TOUS LES TESTS PASS√âS ! Installation valid√©e avec succ√®s."
    echo ""
    echo "‚úÖ Votre portfolio Hocine IRATNI est correctement install√© et fonctionnel."
    echo "üåê Acc√®s :"
    echo "  ‚Ä¢ Backend API : http://localhost:8001/api/"
    echo "  ‚Ä¢ Frontend    : http://localhost:3000/"
    echo "  ‚Ä¢ Health Check: http://localhost:8001/api/health"
    echo ""
    exit 0
else
    log_error "‚ùå $FAIL_COUNT test(s) √©chou√©(s). V√©rifiez l'installation."
    echo ""
    echo "üîß Actions recommand√©es :"
    echo "  ‚Ä¢ V√©rifiez les logs : tail -f /var/log/supervisor/portfolio-*.log"
    echo "  ‚Ä¢ Red√©marrez les services : sudo supervisorctl restart all"
    echo "  ‚Ä¢ Consultez le guide : INSTALLATION-MANUELLE-UBUNTU-24.04.md"
    echo ""
    exit 1
fi
#!/bin/bash

# =====================================================================
# SCRIPT DE VALIDATION PORTFOLIO v2.0 - UBUNTU 24.04
# V√©rifie que l'installation fonctionne correctement
# =====================================================================

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Compteurs
TESTS_PASSED=0
TESTS_FAILED=0
TOTAL_TESTS=0

# Fonction de test
test_function() {
    local test_name="$1"
    local test_command="$2"
    local expected_result="$3"
    
    ((TOTAL_TESTS++))
    echo -e "${BLUE}[TEST $TOTAL_TESTS] ${test_name}${NC}"
    
    if eval "$test_command"; then
        echo -e "${GREEN}‚úÖ PASS${NC} - $test_name"
        ((TESTS_PASSED++))
        return 0
    else
        echo -e "${RED}‚ùå FAIL${NC} - $test_name"
        ((TESTS_FAILED++))
        return 1
    fi
}

# Fonction d'information
info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Fonction de succ√®s
success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Fonction d'erreur
error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Fonction d'avertissement
warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

echo -e "${GREEN}==============================================${NC}"
echo -e "${GREEN}üß™ VALIDATION PORTFOLIO v2.0 - UBUNTU 24.04${NC}"
echo -e "${GREEN}==============================================${NC}"
echo ""

# =====================================================================
# TEST 1: V√âRIFICATION DU SYST√àME
# =====================================================================
info "üîç V√©rification du syst√®me..."

test_function "Ubuntu 24.04 d√©tect√©" \
    "grep -q 'Ubuntu 24.04' /etc/os-release" \
    "true"

test_function "Utilisateur portfolio existe" \
    "id -u portfolio >/dev/null 2>&1" \
    "true"

test_function "R√©pertoire portfolio existe" \
    "[ -d /opt/portfolio ]" \
    "true"

# =====================================================================
# TEST 2: V√âRIFICATION DES SERVICES
# =====================================================================
info "üîß V√©rification des services..."

test_function "MariaDB en cours d'ex√©cution" \
    "systemctl is-active mariadb >/dev/null 2>&1" \
    "true"

test_function "Nginx en cours d'ex√©cution" \
    "systemctl is-active nginx >/dev/null 2>&1" \
    "true"

test_function "Supervisor en cours d'ex√©cution" \
    "systemctl is-active supervisor >/dev/null 2>&1" \
    "true"

# =====================================================================
# TEST 3: V√âRIFICATION DE LA BASE DE DONN√âES
# =====================================================================
info "üóÑÔ∏è V√©rification de la base de donn√©es..."

test_function "Base de donn√©es portfolio_db existe" \
    "mysql -u root -e 'USE portfolio_db; SELECT 1;' >/dev/null 2>&1" \
    "true"

test_function "Utilisateur portfolio_user existe" \
    "mysql -u root -e \"SELECT User FROM mysql.user WHERE User='portfolio_user';\" | grep -q portfolio_user" \
    "true"

# Test de connexion avec l'utilisateur portfolio
if [ -f /opt/portfolio/backend/.env ]; then
    DB_PASSWORD=$(grep DATABASE_URL /opt/portfolio/backend/.env | cut -d':' -f3 | cut -d'@' -f1)
    test_function "Connexion utilisateur portfolio_user" \
        "mysql -u portfolio_user -p$DB_PASSWORD -e 'SELECT 1;' >/dev/null 2>&1" \
        "true"
else
    warning "Fichier .env introuvable, test de connexion ignor√©"
fi

# =====================================================================
# TEST 4: V√âRIFICATION DU BACKEND
# =====================================================================
info "üêç V√©rification du backend..."

test_function "Environnement virtuel Python existe" \
    "[ -d /opt/portfolio/backend/venv ]" \
    "true"

test_function "Fichier requirements.txt existe" \
    "[ -f /opt/portfolio/backend/requirements.txt ]" \
    "true"

test_function "Fichier .env existe" \
    "[ -f /opt/portfolio/backend/.env ]" \
    "true"

test_function "Service portfolio-backend en cours d'ex√©cution" \
    "supervisorctl status portfolio-backend | grep -q RUNNING" \
    "true"

# =====================================================================
# TEST 5: V√âRIFICATION DU FRONTEND
# =====================================================================
info "‚öõÔ∏è V√©rification du frontend..."

test_function "R√©pertoire build existe" \
    "[ -d /opt/portfolio/frontend/build ]" \
    "true"

test_function "Fichier package.json existe" \
    "[ -f /opt/portfolio/frontend/package.json ]" \
    "true"

test_function "Node modules install√©s" \
    "[ -d /opt/portfolio/frontend/node_modules ]" \
    "true"

# =====================================================================
# TEST 6: TESTS DE CONNECTIVIT√â
# =====================================================================
info "üåê Tests de connectivit√©..."

# Attendre que les services soient pr√™ts
sleep 5

test_function "Backend r√©pond (port 8001)" \
    "curl -s -o /dev/null -w '%{http_code}' http://localhost:8001/api/ | grep -q 200" \
    "true"

test_function "Frontend r√©pond (port 80)" \
    "curl -s -o /dev/null -w '%{http_code}' http://localhost/ | grep -q 200" \
    "true"

# =====================================================================
# TEST 7: TESTS DE L'API v2.0
# =====================================================================
info "üîç Tests de l'API v2.0..."

test_function "Health check API disponible" \
    "curl -s http://localhost:8001/api/health | jq -e '.status' | grep -q 'healthy'" \
    "true"

test_function "M√©triques API disponibles" \
    "curl -s http://localhost:8001/api/metrics | jq -e '.timestamp' >/dev/null 2>&1" \
    "true"

test_function "Endpoint personal-info disponible" \
    "curl -s -o /dev/null -w '%{http_code}' http://localhost:8001/api/portfolio/personal-info | grep -q 200" \
    "true"

# =====================================================================
# TEST 8: TEST DE STABILIT√â
# =====================================================================
info "‚è±Ô∏è Test de stabilit√© (pool de connexions)..."

test_function "10 requ√™tes cons√©cutives r√©ussies" \
    "for i in {1..10}; do curl -s http://localhost:8001/api/health >/dev/null || exit 1; done" \
    "true"

test_function "Pool de connexions fonctionnel" \
    "curl -s http://localhost:8001/api/health | jq -e '.connection_pool.pool_size' | grep -q '20'" \
    "true"

# =====================================================================
# TEST 9: V√âRIFICATION DES LOGS
# =====================================================================
info "üìù V√©rification des logs..."

test_function "Logs backend accessibles" \
    "[ -f /var/log/supervisor/portfolio-backend.log ]" \
    "true"

test_function "Logs monitoring accessibles" \
    "[ -f /var/log/supervisor/portfolio-monitoring.log ]" \
    "true"

test_function "Logs Nginx accessibles" \
    "[ -f /var/log/nginx/access.log ]" \
    "true"

# =====================================================================
# TEST 10: V√âRIFICATION DE LA CONFIGURATION
# =====================================================================
info "‚öôÔ∏è V√©rification de la configuration..."

test_function "Configuration MariaDB personnalis√©e" \
    "[ -f /etc/mysql/mariadb.conf.d/99-portfolio.cnf ]" \
    "true"

test_function "Configuration Nginx portfolio" \
    "[ -f /etc/nginx/sites-available/portfolio ]" \
    "true"

test_function "Configuration Supervisor portfolio" \
    "[ -f /etc/supervisor/conf.d/portfolio-backend.conf ]" \
    "true"

# =====================================================================
# TEST 11: PERFORMANCE ET R√âPONSE
# =====================================================================
info "‚ö° Tests de performance..."

# Test de temps de r√©ponse
RESPONSE_TIME=$(curl -s -o /dev/null -w '%{time_total}' http://localhost:8001/api/health)
if (( $(echo "$RESPONSE_TIME < 1.0" | bc -l) )); then
    success "Temps de r√©ponse API acceptable: ${RESPONSE_TIME}s"
    ((TESTS_PASSED++))
else
    error "Temps de r√©ponse API lent: ${RESPONSE_TIME}s"
    ((TESTS_FAILED++))
fi
((TOTAL_TESTS++))

# =====================================================================
# R√âSUM√â FINAL
# =====================================================================
echo ""
echo -e "${GREEN}==============================================${NC}"
echo -e "${GREEN}üìä R√âSUM√â DES TESTS${NC}"
echo -e "${GREEN}==============================================${NC}"
echo -e "Total des tests: $TOTAL_TESTS"
echo -e "${GREEN}Tests r√©ussis: $TESTS_PASSED${NC}"
echo -e "${RED}Tests √©chou√©s: $TESTS_FAILED${NC}"

if [ $TESTS_FAILED -eq 0 ]; then
    echo ""
    echo -e "${GREEN}üéâ VALIDATION R√âUSSIE !${NC}"
    echo -e "${GREEN}Portfolio v2.0 install√© et fonctionnel${NC}"
    echo ""
    echo -e "${BLUE}üåê Acc√®s au site:${NC}"
    echo -e "- Frontend: http://localhost/"
    echo -e "- API: http://localhost:8001/api/"
    echo -e "- Health Check: http://localhost:8001/api/health"
    echo -e "- M√©triques: http://localhost:8001/api/metrics"
    echo ""
    echo -e "${BLUE}üõ†Ô∏è Commandes utiles:${NC}"
    echo -e "- portfolio-status : Statut des services"
    echo -e "- portfolio-logs backend : Logs du backend"
    echo -e "- portfolio-restart : Red√©marrage des services"
    echo ""
    echo -e "${GREEN}‚úÖ Le probl√®me de stabilit√© 30 minutes a √©t√© r√©solu !${NC}"
    exit 0
else
    echo ""
    echo -e "${RED}‚ùå VALIDATION √âCHOU√âE !${NC}"
    echo -e "${RED}$TESTS_FAILED test(s) ont √©chou√©${NC}"
    echo ""
    echo -e "${YELLOW}üîß Actions recommand√©es:${NC}"
    echo -e "1. V√©rifier les logs: tail -f /var/log/supervisor/portfolio-*.log"
    echo -e "2. V√©rifier les services: sudo supervisorctl status"
    echo -e "3. V√©rifier la base de donn√©es: mysql -u root -e 'SHOW DATABASES;'"
    echo -e "4. Relancer l'installation si n√©cessaire"
    exit 1
fi